buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id 'org.ajoberstar.github-pages' version '1.6.0'
}

def depVersions = [
        //all
        commercetoolsSdkJvm: '1.25.0',
        guava: '23.0',
        slf4jLogbackClassic: '1.2.3',
        apacheHttp: '4.5.3',

        // :service
        sparkCore: '2.6.0',
        quartz: '2.3.0',
        jUnit: '4.12',
        assertJ: '3.8.0',
        mockito: '1.10.19',

        // : functionaltests
        concordion: '1.5.1',
        concordionInputStyleExtension: '0.1',
        concordionConcordionRunTotalsExtension: '1.0.0',
        concordionParallelRunExtension: '1.0.1',
        seleniumJava: '3.6.0',
        seleniumHtmlunitDriver: '2.27',
        slf4jLog4j: '1.7.25'

]

allprojects {
    group = 'com.commercetools'
    version = '2.2.0-dev' // this version is used in shadowJar.manifest.Implementation-Version and then at runtime as getImplementationVersion()

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation "com.google.guava:guava:${depVersions.guava}"
        implementation "com.commercetools.sdk.jvm.core:commercetools-java-client:${depVersions.commercetoolsSdkJvm}"
        implementation "com.commercetools.sdk.jvm.core:commercetools-models:${depVersions.commercetoolsSdkJvm}"
        implementation "ch.qos.logback:logback-classic:${depVersions.slf4jLogbackClassic}"
        implementation "org.apache.httpcomponents:httpclient:${depVersions.apacheHttp}"
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

project(":service") {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'application' // allow "run" task to build and run the app

    // required property for application plugin
    mainClassName = 'com.commercetools.Main'

    dependencies {
        implementation("com.sparkjava:spark-core:${depVersions.sparkCore}") {
            exclude group: 'org.slf4j', module: 'slf4j-simple'
        }
        implementation "org.quartz-scheduler:quartz:${depVersions.quartz}"

        testImplementation "junit:junit:${depVersions.jUnit}"
        testImplementation "org.assertj:assertj-core:${depVersions.assertJ}"
        testImplementation "org.mockito:mockito-core:${depVersions.mockito}"
    }

    shadowJar {
        baseName = rootProject.name
        classifier = null
        version = null

        manifest {
            attributes 'Main-Class': project.mainClassName

            // set version to define at runtime using getImplementationVersion()
            attributes 'Implementation-Title': rootProject.name
            attributes 'Implementation-Version': allprojects.version
        }

        doLast {
            println "Packaged JAR to ${destinationDir}/${archiveName}"
        }
    }

    run {
        description 'Use this task to run the service locally using gradle.properties settings'
        dependsOn ':service:convertGradlePropertiesToJvmArgs'
    }

    task convertGradlePropertiesToJvmArgs (type:Task) {
        description 'Convert the gradle build properties (set in gradle.properties) ' +
                    'to JVM runtime properties (-Dkey=value arguments)'

        doLast {
            applicationDefaultJvmArgs = getServiceProperties(project)
        }
    }
}

/**
 * Convert the list of application specific properties from gradle build properties (<i>~/.gradle/gradle.properties</i>)
 * or environment variables to java runtime properties (supplied as <b>-Dkey=value</b> arguments).
 * <p>
 *     The converting is used to provide easy local service run/debug: the developer specifies properties in local
 *     {@code gradle.properties} and easily runs {@code ./gradlew run} task, which is provided by gradle
 *     <i>application</i> plugin. Also in IDE you could run directly gradle <i>run</i> task in debug mode.
 * <p>
 *     The function tries to find a property value from the {@code project} properties and then from environment variables.
 *     If neither of them exists - the property mapping is skipped.
 * <p>
 *     Also this function tries to parse {@code TENANTS} property and later maps <b>all</b> available values which have
 *     property name starting string with tenant name.
 * <p>
 *     Opposite to {@link #assertExecutableSpecRequirementsForTests(org.gradle.api.Project, org.gradle.api.tasks.testing.Test)}
 *     this function is used for the service runtime.
 *
 * @param project gradle project from which to take the properties
 * @return a list of java runtime argument in <i>-Dkey=value</i> syntax.
 *
 * @see #assertExecutableSpecRequirementsForTests(org.gradle.api.Project, org.gradle.api.tasks.testing.Test)
 */
static List<String> getServiceProperties(Project project) {
    def commonProperties = [
            'TENANTS',
            'LONG_TIME_FRAME_SCHEDULED_JOB_CRON',
            'SHORT_TIME_FRAME_SCHEDULED_JOB_CRON'
    ]

    def tenantsString = findValueByName(project, 'TENANTS')?.trim()

    // try to map all tenant-specific properties (e.g., prefixed by tenant name) from project.properties or System.getenv() set
    if (tenantsString) {
        def tenantsList = tenantsString.split("\\s*,\\s*") // split and trim

        // merge and filter all properties prefixed by a tenant name
        def tenantsProperties = (project.properties.keySet() + System.getenv().keySet()).findAll { property ->
            tenantsList.any {tenantName -> property.startsWith(tenantName)}
        }

        commonProperties.addAll(tenantsProperties)
    }

    def mappedCommonProperties = commonProperties.collect { propertyKey ->
        def propertyValue = findValueByName(project, propertyKey)
        if (propertyValue != null) {
            return "-D${propertyKey}=${propertyValue}"
        }
        return null
    }.grep() // filter out null (empty) properties

    return mappedCommonProperties
}

/**
 * Try to find a property value by name/key in the project properties (e.g. gradle runtime arguments) or
 * environment variables. If property not found - <b>null</b> is returned.
 * @param project project (aka map) where to search the property
 * @param propertyKey property name/key
 * @return property value or <b>null</b> if not found.
 */
static String findValueByName(Project project, String propertyKey) {
    return project.hasProperty(propertyKey) ? (String) project[propertyKey] : System.getenv(propertyKey)
}

/**
 * Asserts that system properties and environment variables required for running the executable specification are set.
 * <p>
 *     Opposite to {@link #getServiceProperties(org.gradle.api.Project)} this function is used for
 *     functional tests.
 *
 * @param project the project
 * @param test the test task to assert the configuration for
 *
 * @throws GradleException if any required system property or environment variable is undefined or empty
 * @see #getServiceProperties(org.gradle.api.Project)
 */
static void assertExecutableSpecRequirementsForTests(Project project, Test test) {
    test.systemProperties['concordion.extensions'] =
            'org.concordion.ext.inputstyle.InputStyleExtension,' +
            'org.concordion.ext.runtotals.RunTotalsExtension,' +
            'org.concordion.ext.ParallelRunExtension'

    test.systemProperties['concordion.output.dir'] = project.reporting.baseDir.getAbsolutePath() + "/spec"
    test.systemProperties['concordion.run.threadCount'] = '2.5C' // 2.5 * number of cores

    def propertiesToMap = ['TEST_DATA_CT_PROJECT_KEY',
                           'TEST_DATA_CT_CLIENT_ID',
                           'TEST_DATA_CT_CLIENT_SECRET',
                           'TEST_DATA_CT_PAYONE_INTEGRATION_URL',

                           'TEST_DATA_TENANT_NAME',

                           'TEST_DATA_VISA_CREDIT_CARD_NO_3DS',
                           'TEST_DATA_VISA_CREDIT_CARD_3DS',
                           'TEST_DATA_3_DS_PASSWORD',
                           'TEST_DATA_SW_BANK_TRANSFER_IBAN',
                           'TEST_DATA_SW_BANK_TRANSFER_BIC',
                           'TEST_DATA_SW_BANK_TRANSFER_PIN',
                           'TEST_DATA_SW_BANK_TRANSFER_TAN',

                           'TEST_DATA_PAYONE_MERCHANT_ID',
                           'TEST_DATA_PAYONE_SUBACC_ID',
                           'TEST_DATA_PAYONE_PORTAL_ID',
                           'TEST_DATA_PAYONE_KEY',

                            // BaseTenant2Fixture uses these values
                           'TEST_DATA_TENANT_NAME_2',
                           'TEST_DATA_CT_PROJECT_KEY_2',
                           'TEST_DATA_CT_CLIENT_ID_2',
                           'TEST_DATA_CT_CLIENT_SECRET_2',
                           'TEST_DATA_PAYONE_MERCHANT_ID_2',
                           'TEST_DATA_PAYONE_SUBACC_ID_2',
                           'TEST_DATA_PAYONE_PORTAL_ID_2',
                           'TEST_DATA_PAYONE_KEY_2'
    ]

    propertiesToMap.each { propertyKey ->
        test.environment propertyKey, findValueByName(project, propertyKey)
        assertMapValueIsNotNullOrEmpty(propertyKey, test.getEnvironment())
    }
}

project(":functionaltests") {
    dependencies {
        testImplementation project(":service")

        testImplementation "org.concordion:concordion:${depVersions.concordion}"
        testImplementation "org.concordion:concordion-input-style-extension:${depVersions.concordionInputStyleExtension}"
        testImplementation "org.concordion:concordion-run-totals-extension:${depVersions.concordionConcordionRunTotalsExtension}"
        testImplementation ("org.concordion:concordion-parallel-run-extension:${depVersions.concordionParallelRunExtension}") {
            exclude group: 'com.google.guava', module: 'guava'
        }

        testImplementation "org.seleniumhq.selenium:selenium-java:${depVersions.seleniumJava}"
        testImplementation "org.seleniumhq.selenium:htmlunit-driver:${depVersions.seleniumHtmlunitDriver}"

        // the selenium dependency above has default Log4j logger, thus we have to bridge it to our slf4j settings
        testImplementation "org.slf4j:log4j-over-slf4j:${depVersions.slf4jLog4j}"
    }

    compileJava.dependsOn ':service:jar'

    test {
        description 'This task is supposed to run single tests, only.'
    }

    test.doFirst {
        assertExecutableSpecRequirementsForTests(project, test)
    }

    task testSpec(type: Test) {
        description 'This task tests the executable Concordion specification.'

        filter {
            includeTestsMatching 'specs.SpecsFixture'
        }
    }

    testSpec.doFirst {
        assertExecutableSpecRequirementsForTests(project, testSpec)
    }
}

// Publish build results to github pages settings:

def staticPages = project.copySpec {
    from 'ghpages/' // static content - root index.html page
}

def generatedPages = project.copySpec {
    into 'latest/'
    from 'functionaltests/build/reports/' // test results: both Concordion and loging console outputs
}

githubPages {
    repoUri = 'https://github.com/commercetools/commercetools-payone-integration.git'

    credentials {
        // with GitHub token only HTTPS protocol should be used as a repo Uri
        username = System.getenv('GH_TOKEN')
        password = ''
    }

    pages {
        into '.'
        with staticPages, generatedPages
    }
}

publishGhPages  {
    doFirst {
        // print warning message if github pages plugin credentials are empty
        if (!githubPages.credentials.username?.trim()) {
            logger.warn("\n[WARNING] Github-pages credentials are empty, publishing the tests results may be skipped\n")
        }
    }

    doLast {
        println "\nPublished results to http://commercetools.github.io/commercetools-payone-integration/\n"
    }
}

/**
 * Asserts that the map contains a non-null, non-empty value for the given key.
 * @param key the key of the value to be checked
 * @param map the key-value map
 *
 * @throws GradleException if the value is undefined or empty
 */
static void assertMapValueIsNotNullOrEmpty(String key, Map<String, Object> map) {
    assertValueIsNotNullOrEmpty(key, map.get(key))
}

/**
 * Asserts that the property is non-null and non-empty value.
 * @param key      property name to show in case of exception
 * @param property a property to verify
 *
 * @throws GradleException if the value is undefined or empty
 */
static String assertValueIsNotNullOrEmpty(String key, String property) {
    if ((property == null) || property.isEmpty()) {
        throw new GradleException('Property or environment variable ' + key + ' must not be null or empty.')
    }

    return property
}

task stage {
    description 'This task is run by Heroku and generates the service jar including all dependencies.'
    dependsOn ':service:shadowJar'
}

task ciBuild {
    description 'This task is run by Travis. It builds the service and runs its unit tests. In addition it builds the functionaltests.'
    dependsOn ':service:test', ':functionaltests:compileTestJava'
}
